# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ly-CGIe3AuBPo0KpHy8VGEoaRW9hOJw2
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler

# Reading the CSV file into a DataFrame
df = pd.read_csv('/emails.csv.zip')

# Displaying the first few rows of the DataFrame
print(df.head())

"""**Preprocessing  of Data**"""

# Step 1: Handling Missing Values
df.fillna(method='ffill', inplace=True)  # Forward fill missing values

df.drop(columns=['Email No.'], inplace=True)
labels = df.iloc[:, -1]
df = df.iloc[:, :-1]

# Step 2: Encoding Categorical Variables
# Drop the last column from the DataFrame
df = df.iloc[:, :-1]

# Step 3: Scaling Numerical Features
scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)

# Display the processed DataFrame
print(df_scaled)

"""**Model Training And Evaluation**"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score


# Split the dataset into features and target variable
X = df_scaled  # Preprocessed features
y = labels  # Actual labels

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train different models

# Logistic Regression
logreg = LogisticRegression()
logreg.fit(X_train, y_train)
y_pred_logreg = logreg.predict(X_test)

# Decision Tree
tree = DecisionTreeClassifier(random_state=42)
tree.fit(X_train, y_train)
y_pred_tree = tree.predict(X_test)

# Support Vector Machine (SVM)
svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)

# Evaluate the models
def evaluate_model(y_test, y_pred):
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Precision:", precision_score(y_test, y_pred))
    print("Recall:", recall_score(y_test, y_pred))
    print("F1 Score:", f1_score(y_test, y_pred))

print("Logistic Regression Performance:")
evaluate_model(y_test, y_pred_logreg)

print("\nDecision Tree Performance:")
evaluate_model(y_test, y_pred_tree)

print("\nSVM Performance:")
evaluate_model(y_test, y_pred_svm)